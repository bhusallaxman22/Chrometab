{"version":3,"sources":["Bookmark.js","Book.js","BookList.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Bookmark","id","name","url","image","iamge","Book","className","href","title","src","alt","BookList","Bookamrk","map","_user","i","key","Footer","React","Component","App","props","handleChange","event","setState","text","target","value","handleSubmit","preventDefault","olla","state","polla","includes","jhola","window","location","open","onSubmit","this","onChange","placeholder","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNA4CeA,EA5CE,CACb,CACIC,GAAI,EACJC,KAAM,UACNC,IAAI,sBACJC,MAAM,iBAEV,CACIH,GAAI,EACJC,KAAM,WACNC,IAAI,uBACJC,MAAM,kBAEV,CACIH,GAAI,EACJC,KAAK,eACLC,IAAI,iCACJE,MAAM,8FAEV,CACIJ,GAAG,EACHC,KAAM,UACNC,IAAK,6BACLC,MAAM,iBAEV,CACIH,GAAG,EACHC,KAAK,SACLC,IAAI,kBACJC,MAAM,iBAEV,CACIH,GAAG,EACHC,KAAK,UACLC,IAAI,mBACJC,MAAM,iBAEV,CACIH,GAAG,EACHC,KAAK,YACLC,IAAI,2BACJC,MAAM,6BC1BCE,EAdF,SAAC,GAA8B,EAA5BL,GAA6B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,IAAkB,EAAbC,MAC/B,OACI,yBAAKG,UAAU,OACX,0BAAMA,UAAU,iBACZ,uBAAGC,KAAML,GACb,yBAAKM,MAAK,UAAKP,GAAQK,UAAU,8DAC7B,yBAAKG,IAAG,kBAAaR,EAAb,QAAyBK,UAAU,MAAMI,IAAKT,IACtD,uBAAGK,UAAU,gBAAgBL,QCiB1BU,EApBE,SAAC,GAAiB,EAAfC,SAChB,OACI,6BAEQb,EAASc,KAAI,SAACC,EAAOC,GACjB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLf,GAAID,EAASgB,GAAGf,GAChBC,KAAMF,EAASgB,GAAGd,KAClBC,IAAMH,EAASgB,GAAGb,IAClBC,MAAOJ,EAASgB,GAAGX,aCL5Ba,E,iLAPP,OACI,yBAAKX,UAAU,UACX,qD,GAJKY,IAAMC,WC2CZC,E,YAtCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQVC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,KAAMF,EAAMG,OAAOC,SAVf,EAYrBC,aAAe,SAACL,GACdA,EAAMM,iBACR,IAAIC,EAAM,EAAKC,MAAMN,KACjBO,EAAM,mCAAD,OAAoCF,GAC7C,IAA8B,IAA1BA,EAAKG,SAAS,QAAkB,CACnC,IAAIC,EAAO,WAAaJ,EACvBK,OAAOC,SAAUF,EACjBC,OAAOE,KAAKH,QAEdC,OAAOC,SAAUJ,EACjBG,OAAOE,KAAKL,IApBR,EAAKD,MAAQ,CACXhC,SAAUA,EACV0B,KAAM,IAJS,E,sEA0BnB,OACE,0BAAMnB,UAAU,MAChB,6CAAsB,6BACtB,0BAAMgC,SAAUC,KAAKX,cACzB,2BAAOY,SAAUD,KAAKjB,aAAemB,YAAY,iBAAiBnC,UAAU,6BACrE,6BACP,kBAAC,EAAD,CAAUM,SAAUb,IACpB,kBAAC,EAAD,W,GAlCkBmB,IAAMC,WCMJuB,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1d6f6670.chunk.js","sourcesContent":["const Bookmark = [\n    {\n        id: 1,\n        name: 'Youtube',\n        url:\"https://youtube.com\",\n        image:\"./youtube.png\"\n    },\n    {\n        id: 2,\n        name: \"Facebook\",\n        url:\"https://facebook.com\",\n        image:\"./facebook.png\"\n    },\n    {\n        id: 3,\n        name:\"My Portfolio\",\n        url:\"https:bhusallaxman22.github.io\",\n        iamge:\"https://bhusallaxman22.github.io/bhusallaxman22.github.io/static/media/laxman.2c3aadff.jpg\"\n    },\n    {\n        id:4,\n        name: \"Netflix\",\n        url: \"https://netflix.com/browse\",\n        image:\"./netflix.png\"\n    },\n    {\n        id:4,\n        name:\"9anime\",\n        url:\"https:9anime.nl\",\n        image:\"./9anime.webp\"\n    },\n    {\n        id:5,\n        name:\"fmovies\",\n        url:\"https:fmovies.to\",\n        image:\"./fmovies.png\"\n    },\n    {\n        id:6,\n        name:\"PirateBay\",\n        url:\"https://thepiratebay.org\",\n        image:\"./The-Pirate-Bay-TBP.png\"\n    }\n]\nexport default Bookmark","import React from 'react'\nconst Book = ({ id, name, url, image } ) => {\nreturn(\n    <div className='aaa'>\n        <span className='card block tc'>\n            <a href={url} >\n        <div title={`${name}`} className='bg-light-yellow grow dib br4 pa3 cp ma2 hover bw2 shadow=8'>\n            <img src={`./image/${name}.jpg`} className='br4' alt={name} />\n            <p className='light-yellow'>{name}</p>\n            </div>\n            </a>\n        </span>\n    </div>\n)\n}\nexport default Book;","import React from 'react';\n\nimport Book from './Book'\nimport Bookmark from './Bookmark';\n\nconst BookList = ({ Bookamrk }) => {\n    return (\n        <div>\n            {\n                Bookmark.map((_user, i) => {\n                    return (\n                        <Book \n                        key={i}\n                        id={Bookmark[i].id}\n                        name={Bookmark[i].name}\n                        url= {Bookmark[i].url}\n                        image={Bookmark[i].iamge}\n                        />\n                    )\n                })\n            }\n            \n        </div>\n    )\n}\nexport default BookList;","import React from 'react';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"footer\">\r\n                <p>Â©Laxman Bhusal</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Footer;","import React from 'react';\nimport Bookmark from './Bookmark'\nimport BookList from './BookList'\nimport Footer from './Footer';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Bookmark: Bookmark,\n      text: '',\n    }\n  }\n\n\nhandleChange = (event) => {\n  this.setState({text: event.target.value})\n}\nhandleSubmit = (event) => {\n  event.preventDefault();\nvar olla= this.state.text;\nvar polla=`https://www.google.com/search?q=${olla}`\nif (olla.includes(\".com\",)=== true) {\n var jhola= \"https://\" + olla\n  window.location= jhola;\n  window.open(jhola)\n} else {\nwindow.location= polla;\nwindow.open(polla)\n}\n} \n  render() {\n  return (\n    <span className='db'>\n    <h1>LAXMAN BHUSAL</h1><hr />\n    <form onSubmit={this.handleSubmit}>\n<input onChange={this.handleChange}  placeholder='Type To Search' className='green bg-light-pink br4' />\n</form><hr />\n<BookList Bookamrk={Bookmark} />\n<Footer />\n</span>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}